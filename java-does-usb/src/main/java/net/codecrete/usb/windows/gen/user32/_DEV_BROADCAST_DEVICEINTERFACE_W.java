// Generated by jextract

package net.codecrete.usb.windows.gen.user32;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.SequenceLayout;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct _DEV_BROADCAST_DEVICEINTERFACE_W {
 *     DWORD dbcc_size;
 *     DWORD dbcc_devicetype;
 *     DWORD dbcc_reserved;
 *     GUID dbcc_classguid;
 *     wchar_t dbcc_name[1];
 * }
 * }
 */
public class _DEV_BROADCAST_DEVICEINTERFACE_W {

    _DEV_BROADCAST_DEVICEINTERFACE_W() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        User32.C_LONG.withName("dbcc_size"),
        User32.C_LONG.withName("dbcc_devicetype"),
        User32.C_LONG.withName("dbcc_reserved"),
        _GUID.layout().withName("dbcc_classguid"),
        MemoryLayout.sequenceLayout(1, User32.C_SHORT).withName("dbcc_name"),
        MemoryLayout.paddingLayout(2)
    ).withName("_DEV_BROADCAST_DEVICEINTERFACE_W");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dbcc_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dbcc_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dbcc_size
     * }
     */
    public static final OfInt dbcc_size$layout() {
        return dbcc_size$LAYOUT;
    }

    private static final long dbcc_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dbcc_size
     * }
     */
    public static final long dbcc_size$offset() {
        return dbcc_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dbcc_size
     * }
     */
    public static int dbcc_size(MemorySegment struct) {
        return struct.get(dbcc_size$LAYOUT, dbcc_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dbcc_size
     * }
     */
    public static void dbcc_size(MemorySegment struct, int fieldValue) {
        struct.set(dbcc_size$LAYOUT, dbcc_size$OFFSET, fieldValue);
    }

    private static final OfInt dbcc_devicetype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dbcc_devicetype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dbcc_devicetype
     * }
     */
    public static final OfInt dbcc_devicetype$layout() {
        return dbcc_devicetype$LAYOUT;
    }

    private static final long dbcc_devicetype$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dbcc_devicetype
     * }
     */
    public static final long dbcc_devicetype$offset() {
        return dbcc_devicetype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dbcc_devicetype
     * }
     */
    public static int dbcc_devicetype(MemorySegment struct) {
        return struct.get(dbcc_devicetype$LAYOUT, dbcc_devicetype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dbcc_devicetype
     * }
     */
    public static void dbcc_devicetype(MemorySegment struct, int fieldValue) {
        struct.set(dbcc_devicetype$LAYOUT, dbcc_devicetype$OFFSET, fieldValue);
    }

    private static final OfInt dbcc_reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dbcc_reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dbcc_reserved
     * }
     */
    public static final OfInt dbcc_reserved$layout() {
        return dbcc_reserved$LAYOUT;
    }

    private static final long dbcc_reserved$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dbcc_reserved
     * }
     */
    public static final long dbcc_reserved$offset() {
        return dbcc_reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dbcc_reserved
     * }
     */
    public static int dbcc_reserved(MemorySegment struct) {
        return struct.get(dbcc_reserved$LAYOUT, dbcc_reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dbcc_reserved
     * }
     */
    public static void dbcc_reserved(MemorySegment struct, int fieldValue) {
        struct.set(dbcc_reserved$LAYOUT, dbcc_reserved$OFFSET, fieldValue);
    }

    private static final GroupLayout dbcc_classguid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dbcc_classguid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID dbcc_classguid
     * }
     */
    public static final GroupLayout dbcc_classguid$layout() {
        return dbcc_classguid$LAYOUT;
    }

    private static final long dbcc_classguid$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID dbcc_classguid
     * }
     */
    public static final long dbcc_classguid$offset() {
        return dbcc_classguid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID dbcc_classguid
     * }
     */
    public static MemorySegment dbcc_classguid(MemorySegment struct) {
        return struct.asSlice(dbcc_classguid$OFFSET, dbcc_classguid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID dbcc_classguid
     * }
     */
    public static void dbcc_classguid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dbcc_classguid$OFFSET, dbcc_classguid$LAYOUT.byteSize());
    }

    private static final SequenceLayout dbcc_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dbcc_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * wchar_t dbcc_name[1]
     * }
     */
    public static final SequenceLayout dbcc_name$layout() {
        return dbcc_name$LAYOUT;
    }

    private static final long dbcc_name$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * wchar_t dbcc_name[1]
     * }
     */
    public static final long dbcc_name$offset() {
        return dbcc_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * wchar_t dbcc_name[1]
     * }
     */
    public static MemorySegment dbcc_name(MemorySegment struct) {
        return struct.asSlice(dbcc_name$OFFSET, dbcc_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * wchar_t dbcc_name[1]
     * }
     */
    public static void dbcc_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dbcc_name$OFFSET, dbcc_name$LAYOUT.byteSize());
    }

    private static long[] dbcc_name$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * wchar_t dbcc_name[1]
     * }
     */
    public static long[] dbcc_name$dimensions() {
        return dbcc_name$DIMS;
    }
    private static final VarHandle dbcc_name$ELEM_HANDLE = dbcc_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * wchar_t dbcc_name[1]
     * }
     */
    public static short dbcc_name(MemorySegment struct, long index0) {
        return (short)dbcc_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * wchar_t dbcc_name[1]
     * }
     */
    public static void dbcc_name(MemorySegment struct, long index0, short fieldValue) {
        dbcc_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

