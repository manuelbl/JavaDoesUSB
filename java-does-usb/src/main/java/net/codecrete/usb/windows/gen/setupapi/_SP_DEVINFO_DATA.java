// Generated by jextract

package net.codecrete.usb.windows.gen.setupapi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SP_DEVINFO_DATA {
 *     DWORD cbSize;
 *     GUID ClassGuid;
 *     DWORD DevInst;
 *     ULONG_PTR Reserved;
 * }
 * }
 */
public class _SP_DEVINFO_DATA {

    _SP_DEVINFO_DATA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        SetupAPI.C_LONG.withName("cbSize"),
        _GUID.layout().withName("ClassGuid"),
        SetupAPI.C_LONG.withName("DevInst"),
        SetupAPI.C_LONG_LONG.withName("Reserved")
    ).withName("_SP_DEVINFO_DATA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final GroupLayout ClassGuid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ClassGuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID ClassGuid
     * }
     */
    public static final GroupLayout ClassGuid$layout() {
        return ClassGuid$LAYOUT;
    }

    private static final long ClassGuid$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID ClassGuid
     * }
     */
    public static final long ClassGuid$offset() {
        return ClassGuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID ClassGuid
     * }
     */
    public static MemorySegment ClassGuid(MemorySegment struct) {
        return struct.asSlice(ClassGuid$OFFSET, ClassGuid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID ClassGuid
     * }
     */
    public static void ClassGuid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ClassGuid$OFFSET, ClassGuid$LAYOUT.byteSize());
    }

    private static final OfInt DevInst$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DevInst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DevInst
     * }
     */
    public static final OfInt DevInst$layout() {
        return DevInst$LAYOUT;
    }

    private static final long DevInst$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DevInst
     * }
     */
    public static final long DevInst$offset() {
        return DevInst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DevInst
     * }
     */
    public static int DevInst(MemorySegment struct) {
        return struct.get(DevInst$LAYOUT, DevInst$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DevInst
     * }
     */
    public static void DevInst(MemorySegment struct, int fieldValue) {
        struct.set(DevInst$LAYOUT, DevInst$OFFSET, fieldValue);
    }

    private static final OfLong Reserved$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved
     * }
     */
    public static final OfLong Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved
     * }
     */
    public static long Reserved(MemorySegment struct) {
        return struct.get(Reserved$LAYOUT, Reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved
     * }
     */
    public static void Reserved(MemorySegment struct, long fieldValue) {
        struct.set(Reserved$LAYOUT, Reserved$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

