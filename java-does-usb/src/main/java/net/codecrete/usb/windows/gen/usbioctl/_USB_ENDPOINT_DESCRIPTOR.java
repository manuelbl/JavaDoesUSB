// Generated by jextract

package net.codecrete.usb.windows.gen.usbioctl;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfShort;

/**
 * {@snippet lang=c :
 * struct _USB_ENDPOINT_DESCRIPTOR {
 *     UCHAR bLength;
 *     UCHAR bDescriptorType;
 *     UCHAR bEndpointAddress;
 *     UCHAR bmAttributes;
 *     USHORT wMaxPacketSize;
 *     UCHAR bInterval;
 * }
 * }
 */
public class _USB_ENDPOINT_DESCRIPTOR {

    _USB_ENDPOINT_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        USBIoctl.C_CHAR.withName("bLength"),
        USBIoctl.C_CHAR.withName("bDescriptorType"),
        USBIoctl.C_CHAR.withName("bEndpointAddress"),
        USBIoctl.C_CHAR.withName("bmAttributes"),
        USBIoctl.align(USBIoctl.C_SHORT, 1).withName("wMaxPacketSize"),
        USBIoctl.C_CHAR.withName("bInterval")
    ).withName("_USB_ENDPOINT_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bLength$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR bLength
     * }
     */
    public static final OfByte bLength$layout() {
        return bLength$LAYOUT;
    }

    private static final long bLength$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR bLength
     * }
     */
    public static final long bLength$offset() {
        return bLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR bLength
     * }
     */
    public static byte bLength(MemorySegment struct) {
        return struct.get(bLength$LAYOUT, bLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR bLength
     * }
     */
    public static void bLength(MemorySegment struct, byte fieldValue) {
        struct.set(bLength$LAYOUT, bLength$OFFSET, fieldValue);
    }

    private static final OfByte bDescriptorType$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bDescriptorType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR bDescriptorType
     * }
     */
    public static final OfByte bDescriptorType$layout() {
        return bDescriptorType$LAYOUT;
    }

    private static final long bDescriptorType$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR bDescriptorType
     * }
     */
    public static final long bDescriptorType$offset() {
        return bDescriptorType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR bDescriptorType
     * }
     */
    public static byte bDescriptorType(MemorySegment struct) {
        return struct.get(bDescriptorType$LAYOUT, bDescriptorType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR bDescriptorType
     * }
     */
    public static void bDescriptorType(MemorySegment struct, byte fieldValue) {
        struct.set(bDescriptorType$LAYOUT, bDescriptorType$OFFSET, fieldValue);
    }

    private static final OfByte bEndpointAddress$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bEndpointAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR bEndpointAddress
     * }
     */
    public static final OfByte bEndpointAddress$layout() {
        return bEndpointAddress$LAYOUT;
    }

    private static final long bEndpointAddress$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR bEndpointAddress
     * }
     */
    public static final long bEndpointAddress$offset() {
        return bEndpointAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR bEndpointAddress
     * }
     */
    public static byte bEndpointAddress(MemorySegment struct) {
        return struct.get(bEndpointAddress$LAYOUT, bEndpointAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR bEndpointAddress
     * }
     */
    public static void bEndpointAddress(MemorySegment struct, byte fieldValue) {
        struct.set(bEndpointAddress$LAYOUT, bEndpointAddress$OFFSET, fieldValue);
    }

    private static final OfByte bmAttributes$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bmAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR bmAttributes
     * }
     */
    public static final OfByte bmAttributes$layout() {
        return bmAttributes$LAYOUT;
    }

    private static final long bmAttributes$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR bmAttributes
     * }
     */
    public static final long bmAttributes$offset() {
        return bmAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR bmAttributes
     * }
     */
    public static byte bmAttributes(MemorySegment struct) {
        return struct.get(bmAttributes$LAYOUT, bmAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR bmAttributes
     * }
     */
    public static void bmAttributes(MemorySegment struct, byte fieldValue) {
        struct.set(bmAttributes$LAYOUT, bmAttributes$OFFSET, fieldValue);
    }

    private static final OfShort wMaxPacketSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wMaxPacketSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT wMaxPacketSize
     * }
     */
    public static final OfShort wMaxPacketSize$layout() {
        return wMaxPacketSize$LAYOUT;
    }

    private static final long wMaxPacketSize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT wMaxPacketSize
     * }
     */
    public static final long wMaxPacketSize$offset() {
        return wMaxPacketSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT wMaxPacketSize
     * }
     */
    public static short wMaxPacketSize(MemorySegment struct) {
        return struct.get(wMaxPacketSize$LAYOUT, wMaxPacketSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT wMaxPacketSize
     * }
     */
    public static void wMaxPacketSize(MemorySegment struct, short fieldValue) {
        struct.set(wMaxPacketSize$LAYOUT, wMaxPacketSize$OFFSET, fieldValue);
    }

    private static final OfByte bInterval$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bInterval"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR bInterval
     * }
     */
    public static final OfByte bInterval$layout() {
        return bInterval$LAYOUT;
    }

    private static final long bInterval$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR bInterval
     * }
     */
    public static final long bInterval$offset() {
        return bInterval$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR bInterval
     * }
     */
    public static byte bInterval(MemorySegment struct) {
        return struct.get(bInterval$LAYOUT, bInterval$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR bInterval
     * }
     */
    public static void bInterval(MemorySegment struct, byte fieldValue) {
        struct.set(bInterval$LAYOUT, bInterval$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

