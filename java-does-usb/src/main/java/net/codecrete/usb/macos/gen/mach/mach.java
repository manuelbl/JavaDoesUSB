// Generated by jextract

package net.codecrete.usb.macos.gen.mach;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class mach extends mach$shared {

    mach() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());


    private static class mach_error_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mach.C_POINTER,
            mach.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("mach_error_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *mach_error_string(mach_error_t error_value)
     * }
     */
    public static FunctionDescriptor mach_error_string$descriptor() {
        return mach_error_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *mach_error_string(mach_error_t error_value)
     * }
     */
    public static MethodHandle mach_error_string$handle() {
        return mach_error_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *mach_error_string(mach_error_t error_value)
     * }
     */
    public static MemorySegment mach_error_string$address() {
        return mach_error_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *mach_error_string(mach_error_t error_value)
     * }
     */
    public static MemorySegment mach_error_string(int error_value) {
        var mh$ = mach_error_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mach_error_string", error_value);
            }
            return (MemorySegment)mh$.invokeExact(error_value);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

