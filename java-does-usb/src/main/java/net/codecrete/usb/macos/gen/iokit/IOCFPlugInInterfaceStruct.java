// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IOCFPlugInInterfaceStruct {
 *     void *_reserved;
 *     HRESULT (*QueryInterface)(void *, REFIID, LPVOID *);
 *     ULONG (*AddRef)(void *);
 *     ULONG (*Release)(void *);
 *     UInt16 version;
 *     UInt16 revision;
 *     IOReturn (*Probe)(void *, CFDictionaryRef, io_service_t, SInt32 *);
 *     IOReturn (*Start)(void *, CFDictionaryRef, io_service_t);
 *     IOReturn (*Stop)(void *);
 * }
 * }
 */
public class IOCFPlugInInterfaceStruct {

    IOCFPlugInInterfaceStruct() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        IOKit.C_POINTER.withName("_reserved"),
        IOKit.C_POINTER.withName("QueryInterface"),
        IOKit.C_POINTER.withName("AddRef"),
        IOKit.C_POINTER.withName("Release"),
        IOKit.C_SHORT.withName("version"),
        IOKit.C_SHORT.withName("revision"),
        MemoryLayout.paddingLayout(4),
        IOKit.C_POINTER.withName("Probe"),
        IOKit.C_POINTER.withName("Start"),
        IOKit.C_POINTER.withName("Stop")
    ).withName("IOCFPlugInInterfaceStruct");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout _reserved$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *_reserved
     * }
     */
    public static final AddressLayout _reserved$layout() {
        return _reserved$LAYOUT;
    }

    private static final long _reserved$OFFSET = $LAYOUT.byteOffset(groupElement("_reserved"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *_reserved
     * }
     */
    public static final long _reserved$offset() {
        return _reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *_reserved
     * }
     */
    public static MemorySegment _reserved(MemorySegment struct) {
        return struct.get(_reserved$LAYOUT, _reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *_reserved
     * }
     */
    public static void _reserved(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_reserved$LAYOUT, _reserved$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(void *, REFIID, LPVOID *)
     * }
     */
    public final static class QueryInterface {

        private QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            IOKit.C_INT,
            IOKit.C_POINTER,
            CFUUIDBytes.layout(),
            IOKit.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = IOKit.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(void *, REFIID, LPVOID *)
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = $LAYOUT.byteOffset(groupElement("QueryInterface"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(void *, REFIID, LPVOID *)
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(void *, REFIID, LPVOID *)
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(void *, REFIID, LPVOID *)
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(void *)
     * }
     */
    public final static class AddRef {

        private AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            IOKit.C_INT,
            IOKit.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = IOKit.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(void *)
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = $LAYOUT.byteOffset(groupElement("AddRef"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(void *)
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(void *)
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(void *)
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(void *)
     * }
     */
    public final static class Release {

        private Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            IOKit.C_INT,
            IOKit.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = IOKit.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(void *)
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = $LAYOUT.byteOffset(groupElement("Release"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(void *)
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(void *)
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(void *)
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    private static final OfShort version$LAYOUT = (OfShort)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 version
     * }
     */
    public static final OfShort version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = $LAYOUT.byteOffset(groupElement("version"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 version
     * }
     */
    public static short version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 version
     * }
     */
    public static void version(MemorySegment struct, short fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfShort revision$LAYOUT = (OfShort)$LAYOUT.select(groupElement("revision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 revision
     * }
     */
    public static final OfShort revision$layout() {
        return revision$LAYOUT;
    }

    private static final long revision$OFFSET = $LAYOUT.byteOffset(groupElement("revision"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 revision
     * }
     */
    public static final long revision$offset() {
        return revision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 revision
     * }
     */
    public static short revision(MemorySegment struct) {
        return struct.get(revision$LAYOUT, revision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 revision
     * }
     */
    public static void revision(MemorySegment struct, short fieldValue) {
        struct.set(revision$LAYOUT, revision$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * IOReturn (*Probe)(void *, CFDictionaryRef, io_service_t, SInt32 *)
     * }
     */
    public final static class Probe {

        private Probe() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            IOKit.C_INT,
            IOKit.C_POINTER,
            IOKit.C_POINTER,
            IOKit.C_INT,
            IOKit.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = IOKit.upcallHandle(Probe.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Probe.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Probe$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Probe"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IOReturn (*Probe)(void *, CFDictionaryRef, io_service_t, SInt32 *)
     * }
     */
    public static final AddressLayout Probe$layout() {
        return Probe$LAYOUT;
    }

    private static final long Probe$OFFSET = $LAYOUT.byteOffset(groupElement("Probe"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IOReturn (*Probe)(void *, CFDictionaryRef, io_service_t, SInt32 *)
     * }
     */
    public static final long Probe$offset() {
        return Probe$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IOReturn (*Probe)(void *, CFDictionaryRef, io_service_t, SInt32 *)
     * }
     */
    public static MemorySegment Probe(MemorySegment struct) {
        return struct.get(Probe$LAYOUT, Probe$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IOReturn (*Probe)(void *, CFDictionaryRef, io_service_t, SInt32 *)
     * }
     */
    public static void Probe(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Probe$LAYOUT, Probe$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * IOReturn (*Start)(void *, CFDictionaryRef, io_service_t)
     * }
     */
    public final static class Start {

        private Start() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            IOKit.C_INT,
            IOKit.C_POINTER,
            IOKit.C_POINTER,
            IOKit.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = IOKit.upcallHandle(Start.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Start.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Start$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IOReturn (*Start)(void *, CFDictionaryRef, io_service_t)
     * }
     */
    public static final AddressLayout Start$layout() {
        return Start$LAYOUT;
    }

    private static final long Start$OFFSET = $LAYOUT.byteOffset(groupElement("Start"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IOReturn (*Start)(void *, CFDictionaryRef, io_service_t)
     * }
     */
    public static final long Start$offset() {
        return Start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IOReturn (*Start)(void *, CFDictionaryRef, io_service_t)
     * }
     */
    public static MemorySegment Start(MemorySegment struct) {
        return struct.get(Start$LAYOUT, Start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IOReturn (*Start)(void *, CFDictionaryRef, io_service_t)
     * }
     */
    public static void Start(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Start$LAYOUT, Start$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * IOReturn (*Stop)(void *)
     * }
     */
    public final static class Stop {

        private Stop() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            IOKit.C_INT,
            IOKit.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = IOKit.upcallHandle(Stop.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Stop.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Stop$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Stop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IOReturn (*Stop)(void *)
     * }
     */
    public static final AddressLayout Stop$layout() {
        return Stop$LAYOUT;
    }

    private static final long Stop$OFFSET = $LAYOUT.byteOffset(groupElement("Stop"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IOReturn (*Stop)(void *)
     * }
     */
    public static final long Stop$offset() {
        return Stop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IOReturn (*Stop)(void *)
     * }
     */
    public static MemorySegment Stop(MemorySegment struct) {
        return struct.get(Stop$LAYOUT, Stop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IOReturn (*Stop)(void *)
     * }
     */
    public static void Stop(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Stop$LAYOUT, Stop$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

