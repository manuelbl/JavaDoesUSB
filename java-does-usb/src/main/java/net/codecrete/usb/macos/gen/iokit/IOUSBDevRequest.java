// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     UInt8 bmRequestType;
 *     UInt8 bRequest;
 *     UInt16 wValue;
 *     UInt16 wIndex;
 *     UInt16 wLength;
 *     void *pData;
 *     UInt32 wLenDone;
 * }
 * }
 */
public class IOUSBDevRequest {

    IOUSBDevRequest() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        IOKit.C_CHAR.withName("bmRequestType"),
        IOKit.C_CHAR.withName("bRequest"),
        IOKit.C_SHORT.withName("wValue"),
        IOKit.C_SHORT.withName("wIndex"),
        IOKit.C_SHORT.withName("wLength"),
        IOKit.C_POINTER.withName("pData"),
        IOKit.C_INT.withName("wLenDone"),
        MemoryLayout.paddingLayout(4)
    ).withName("IOUSBDevRequest");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bmRequestType$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bmRequestType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt8 bmRequestType
     * }
     */
    public static final OfByte bmRequestType$layout() {
        return bmRequestType$LAYOUT;
    }

    private static final long bmRequestType$OFFSET = $LAYOUT.byteOffset(groupElement("bmRequestType"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt8 bmRequestType
     * }
     */
    public static final long bmRequestType$offset() {
        return bmRequestType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt8 bmRequestType
     * }
     */
    public static byte bmRequestType(MemorySegment struct) {
        return struct.get(bmRequestType$LAYOUT, bmRequestType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt8 bmRequestType
     * }
     */
    public static void bmRequestType(MemorySegment struct, byte fieldValue) {
        struct.set(bmRequestType$LAYOUT, bmRequestType$OFFSET, fieldValue);
    }

    private static final OfByte bRequest$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt8 bRequest
     * }
     */
    public static final OfByte bRequest$layout() {
        return bRequest$LAYOUT;
    }

    private static final long bRequest$OFFSET = $LAYOUT.byteOffset(groupElement("bRequest"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt8 bRequest
     * }
     */
    public static final long bRequest$offset() {
        return bRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt8 bRequest
     * }
     */
    public static byte bRequest(MemorySegment struct) {
        return struct.get(bRequest$LAYOUT, bRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt8 bRequest
     * }
     */
    public static void bRequest(MemorySegment struct, byte fieldValue) {
        struct.set(bRequest$LAYOUT, bRequest$OFFSET, fieldValue);
    }

    private static final OfShort wValue$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 wValue
     * }
     */
    public static final OfShort wValue$layout() {
        return wValue$LAYOUT;
    }

    private static final long wValue$OFFSET = $LAYOUT.byteOffset(groupElement("wValue"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 wValue
     * }
     */
    public static final long wValue$offset() {
        return wValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 wValue
     * }
     */
    public static short wValue(MemorySegment struct) {
        return struct.get(wValue$LAYOUT, wValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 wValue
     * }
     */
    public static void wValue(MemorySegment struct, short fieldValue) {
        struct.set(wValue$LAYOUT, wValue$OFFSET, fieldValue);
    }

    private static final OfShort wIndex$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 wIndex
     * }
     */
    public static final OfShort wIndex$layout() {
        return wIndex$LAYOUT;
    }

    private static final long wIndex$OFFSET = $LAYOUT.byteOffset(groupElement("wIndex"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 wIndex
     * }
     */
    public static final long wIndex$offset() {
        return wIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 wIndex
     * }
     */
    public static short wIndex(MemorySegment struct) {
        return struct.get(wIndex$LAYOUT, wIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 wIndex
     * }
     */
    public static void wIndex(MemorySegment struct, short fieldValue) {
        struct.set(wIndex$LAYOUT, wIndex$OFFSET, fieldValue);
    }

    private static final OfShort wLength$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 wLength
     * }
     */
    public static final OfShort wLength$layout() {
        return wLength$LAYOUT;
    }

    private static final long wLength$OFFSET = $LAYOUT.byteOffset(groupElement("wLength"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 wLength
     * }
     */
    public static final long wLength$offset() {
        return wLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 wLength
     * }
     */
    public static short wLength(MemorySegment struct) {
        return struct.get(wLength$LAYOUT, wLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 wLength
     * }
     */
    public static void wLength(MemorySegment struct, short fieldValue) {
        struct.set(wLength$LAYOUT, wLength$OFFSET, fieldValue);
    }

    private static final AddressLayout pData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pData
     * }
     */
    public static final AddressLayout pData$layout() {
        return pData$LAYOUT;
    }

    private static final long pData$OFFSET = $LAYOUT.byteOffset(groupElement("pData"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pData
     * }
     */
    public static final long pData$offset() {
        return pData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pData
     * }
     */
    public static MemorySegment pData(MemorySegment struct) {
        return struct.get(pData$LAYOUT, pData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pData
     * }
     */
    public static void pData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pData$LAYOUT, pData$OFFSET, fieldValue);
    }

    private static final OfInt wLenDone$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wLenDone"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt32 wLenDone
     * }
     */
    public static final OfInt wLenDone$layout() {
        return wLenDone$LAYOUT;
    }

    private static final long wLenDone$OFFSET = $LAYOUT.byteOffset(groupElement("wLenDone"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt32 wLenDone
     * }
     */
    public static final long wLenDone$offset() {
        return wLenDone$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt32 wLenDone
     * }
     */
    public static int wLenDone(MemorySegment struct) {
        return struct.get(wLenDone$LAYOUT, wLenDone$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt32 wLenDone
     * }
     */
    public static void wLenDone(MemorySegment struct, int fieldValue) {
        struct.set(wLenDone$LAYOUT, wLenDone$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

