// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     UInt16 bInterfaceClass;
 *     UInt16 bInterfaceSubClass;
 *     UInt16 bInterfaceProtocol;
 *     UInt16 bAlternateSetting;
 * }
 * }
 */
public class IOUSBFindInterfaceRequest {

    IOUSBFindInterfaceRequest() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        IOKit.C_SHORT.withName("bInterfaceClass"),
        IOKit.C_SHORT.withName("bInterfaceSubClass"),
        IOKit.C_SHORT.withName("bInterfaceProtocol"),
        IOKit.C_SHORT.withName("bAlternateSetting")
    ).withName("IOUSBFindInterfaceRequest");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort bInterfaceClass$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bInterfaceClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceClass
     * }
     */
    public static final OfShort bInterfaceClass$layout() {
        return bInterfaceClass$LAYOUT;
    }

    private static final long bInterfaceClass$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceClass
     * }
     */
    public static final long bInterfaceClass$offset() {
        return bInterfaceClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceClass
     * }
     */
    public static short bInterfaceClass(MemorySegment struct) {
        return struct.get(bInterfaceClass$LAYOUT, bInterfaceClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceClass
     * }
     */
    public static void bInterfaceClass(MemorySegment struct, short fieldValue) {
        struct.set(bInterfaceClass$LAYOUT, bInterfaceClass$OFFSET, fieldValue);
    }

    private static final OfShort bInterfaceSubClass$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bInterfaceSubClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceSubClass
     * }
     */
    public static final OfShort bInterfaceSubClass$layout() {
        return bInterfaceSubClass$LAYOUT;
    }

    private static final long bInterfaceSubClass$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceSubClass
     * }
     */
    public static final long bInterfaceSubClass$offset() {
        return bInterfaceSubClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceSubClass
     * }
     */
    public static short bInterfaceSubClass(MemorySegment struct) {
        return struct.get(bInterfaceSubClass$LAYOUT, bInterfaceSubClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceSubClass
     * }
     */
    public static void bInterfaceSubClass(MemorySegment struct, short fieldValue) {
        struct.set(bInterfaceSubClass$LAYOUT, bInterfaceSubClass$OFFSET, fieldValue);
    }

    private static final OfShort bInterfaceProtocol$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bInterfaceProtocol"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceProtocol
     * }
     */
    public static final OfShort bInterfaceProtocol$layout() {
        return bInterfaceProtocol$LAYOUT;
    }

    private static final long bInterfaceProtocol$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceProtocol
     * }
     */
    public static final long bInterfaceProtocol$offset() {
        return bInterfaceProtocol$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceProtocol
     * }
     */
    public static short bInterfaceProtocol(MemorySegment struct) {
        return struct.get(bInterfaceProtocol$LAYOUT, bInterfaceProtocol$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 bInterfaceProtocol
     * }
     */
    public static void bInterfaceProtocol(MemorySegment struct, short fieldValue) {
        struct.set(bInterfaceProtocol$LAYOUT, bInterfaceProtocol$OFFSET, fieldValue);
    }

    private static final OfShort bAlternateSetting$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bAlternateSetting"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UInt16 bAlternateSetting
     * }
     */
    public static final OfShort bAlternateSetting$layout() {
        return bAlternateSetting$LAYOUT;
    }

    private static final long bAlternateSetting$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UInt16 bAlternateSetting
     * }
     */
    public static final long bAlternateSetting$offset() {
        return bAlternateSetting$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UInt16 bAlternateSetting
     * }
     */
    public static short bAlternateSetting(MemorySegment struct) {
        return struct.get(bAlternateSetting$LAYOUT, bAlternateSetting$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UInt16 bAlternateSetting
     * }
     */
    public static void bAlternateSetting(MemorySegment struct, short fieldValue) {
        struct.set(bAlternateSetting$LAYOUT, bAlternateSetting$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

