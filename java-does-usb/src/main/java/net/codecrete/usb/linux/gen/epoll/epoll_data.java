// Generated by jextract

package net.codecrete.usb.linux.gen.epoll;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * union epoll_data {
 *     void *ptr;
 *     int fd;
 *     uint32_t u32;
 *     uint64_t u64;
 * }
 * }
 */
public class epoll_data {

    epoll_data() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        epoll.C_POINTER.withName("ptr").withByteAlignment(4),
        epoll.C_INT.withName("fd"),
        epoll.C_INT.withName("u32"),
        epoll.C_LONG.withName("u64").withByteAlignment(4)
    ).withName("epoll_data");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout ptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final AddressLayout ptr$layout() {
        return ptr$LAYOUT;
    }

    private static final long ptr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final long ptr$offset() {
        return ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static MemorySegment ptr(MemorySegment union) {
        return union.get(ptr$LAYOUT, ptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static void ptr(MemorySegment union, MemorySegment fieldValue) {
        union.set(ptr$LAYOUT, ptr$OFFSET, fieldValue);
    }

    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final OfInt fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static int fd(MemorySegment union) {
        return union.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static void fd(MemorySegment union, int fieldValue) {
        union.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    private static final OfInt u32$LAYOUT = (OfInt)$LAYOUT.select(groupElement("u32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t u32
     * }
     */
    public static final OfInt u32$layout() {
        return u32$LAYOUT;
    }

    private static final long u32$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t u32
     * }
     */
    public static final long u32$offset() {
        return u32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t u32
     * }
     */
    public static int u32(MemorySegment union) {
        return union.get(u32$LAYOUT, u32$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t u32
     * }
     */
    public static void u32(MemorySegment union, int fieldValue) {
        union.set(u32$LAYOUT, u32$OFFSET, fieldValue);
    }

    private static final OfLong u64$LAYOUT = (OfLong)$LAYOUT.select(groupElement("u64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static final OfLong u64$layout() {
        return u64$LAYOUT;
    }

    private static final long u64$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static final long u64$offset() {
        return u64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static long u64(MemorySegment union) {
        return union.get(u64$LAYOUT, u64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static void u64(MemorySegment union, long fieldValue) {
        union.set(u64$LAYOUT, u64$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

