// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfShort;

/**
 * {@snippet lang=c :
 * struct usbdevfs_ctrltransfer {
 *     __u8 bRequestType;
 *     __u8 bRequest;
 *     __u16 wValue;
 *     __u16 wIndex;
 *     __u16 wLength;
 *     __u32 timeout;
 *     void *data;
 * }
 * }
 */
public class usbdevfs_ctrltransfer {

    usbdevfs_ctrltransfer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        usbdevice_fs.C_CHAR.withName("bRequestType"),
        usbdevice_fs.C_CHAR.withName("bRequest"),
        usbdevice_fs.C_SHORT.withName("wValue"),
        usbdevice_fs.C_SHORT.withName("wIndex"),
        usbdevice_fs.C_SHORT.withName("wLength"),
        usbdevice_fs.C_INT.withName("timeout"),
        MemoryLayout.paddingLayout(4),
        usbdevice_fs.C_POINTER.withName("data")
    ).withName("usbdevfs_ctrltransfer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bRequestType$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bRequestType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 bRequestType
     * }
     */
    public static final OfByte bRequestType$layout() {
        return bRequestType$LAYOUT;
    }

    private static final long bRequestType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 bRequestType
     * }
     */
    public static final long bRequestType$offset() {
        return bRequestType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 bRequestType
     * }
     */
    public static byte bRequestType(MemorySegment struct) {
        return struct.get(bRequestType$LAYOUT, bRequestType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 bRequestType
     * }
     */
    public static void bRequestType(MemorySegment struct, byte fieldValue) {
        struct.set(bRequestType$LAYOUT, bRequestType$OFFSET, fieldValue);
    }

    private static final OfByte bRequest$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u8 bRequest
     * }
     */
    public static final OfByte bRequest$layout() {
        return bRequest$LAYOUT;
    }

    private static final long bRequest$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u8 bRequest
     * }
     */
    public static final long bRequest$offset() {
        return bRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u8 bRequest
     * }
     */
    public static byte bRequest(MemorySegment struct) {
        return struct.get(bRequest$LAYOUT, bRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u8 bRequest
     * }
     */
    public static void bRequest(MemorySegment struct, byte fieldValue) {
        struct.set(bRequest$LAYOUT, bRequest$OFFSET, fieldValue);
    }

    private static final OfShort wValue$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 wValue
     * }
     */
    public static final OfShort wValue$layout() {
        return wValue$LAYOUT;
    }

    private static final long wValue$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 wValue
     * }
     */
    public static final long wValue$offset() {
        return wValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 wValue
     * }
     */
    public static short wValue(MemorySegment struct) {
        return struct.get(wValue$LAYOUT, wValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 wValue
     * }
     */
    public static void wValue(MemorySegment struct, short fieldValue) {
        struct.set(wValue$LAYOUT, wValue$OFFSET, fieldValue);
    }

    private static final OfShort wIndex$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 wIndex
     * }
     */
    public static final OfShort wIndex$layout() {
        return wIndex$LAYOUT;
    }

    private static final long wIndex$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 wIndex
     * }
     */
    public static final long wIndex$offset() {
        return wIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 wIndex
     * }
     */
    public static short wIndex(MemorySegment struct) {
        return struct.get(wIndex$LAYOUT, wIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 wIndex
     * }
     */
    public static void wIndex(MemorySegment struct, short fieldValue) {
        struct.set(wIndex$LAYOUT, wIndex$OFFSET, fieldValue);
    }

    private static final OfShort wLength$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 wLength
     * }
     */
    public static final OfShort wLength$layout() {
        return wLength$LAYOUT;
    }

    private static final long wLength$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 wLength
     * }
     */
    public static final long wLength$offset() {
        return wLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 wLength
     * }
     */
    public static short wLength(MemorySegment struct) {
        return struct.get(wLength$LAYOUT, wLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 wLength
     * }
     */
    public static void wLength(MemorySegment struct, short fieldValue) {
        struct.set(wLength$LAYOUT, wLength$OFFSET, fieldValue);
    }

    private static final OfInt timeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u32 timeout
     * }
     */
    public static final OfInt timeout$layout() {
        return timeout$LAYOUT;
    }

    private static final long timeout$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u32 timeout
     * }
     */
    public static final long timeout$offset() {
        return timeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u32 timeout
     * }
     */
    public static int timeout(MemorySegment struct) {
        return struct.get(timeout$LAYOUT, timeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u32 timeout
     * }
     */
    public static void timeout(MemorySegment struct, int fieldValue) {
        struct.set(timeout$LAYOUT, timeout$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

