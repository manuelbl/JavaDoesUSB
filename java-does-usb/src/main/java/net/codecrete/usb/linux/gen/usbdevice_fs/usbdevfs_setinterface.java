// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct usbdevfs_setinterface {
 *     unsigned int interface;
 *     unsigned int altsetting;
 * }
 * }
 */
public class usbdevfs_setinterface {

    usbdevfs_setinterface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        usbdevice_fs.C_INT.withName("interface"),
        usbdevice_fs.C_INT.withName("altsetting")
    ).withName("usbdevfs_setinterface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt interface_$LAYOUT = (OfInt)$LAYOUT.select(groupElement("interface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int interface
     * }
     */
    public static final OfInt interface_$layout() {
        return interface_$LAYOUT;
    }

    private static final long interface_$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int interface
     * }
     */
    public static final long interface_$offset() {
        return interface_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int interface
     * }
     */
    public static int interface_(MemorySegment struct) {
        return struct.get(interface_$LAYOUT, interface_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int interface
     * }
     */
    public static void interface_(MemorySegment struct, int fieldValue) {
        struct.set(interface_$LAYOUT, interface_$OFFSET, fieldValue);
    }

    private static final OfInt altsetting$LAYOUT = (OfInt)$LAYOUT.select(groupElement("altsetting"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int altsetting
     * }
     */
    public static final OfInt altsetting$layout() {
        return altsetting$LAYOUT;
    }

    private static final long altsetting$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int altsetting
     * }
     */
    public static final long altsetting$offset() {
        return altsetting$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int altsetting
     * }
     */
    public static int altsetting(MemorySegment struct) {
        return struct.get(altsetting$LAYOUT, altsetting$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int altsetting
     * }
     */
    public static void altsetting(MemorySegment struct, int fieldValue) {
        struct.set(altsetting$LAYOUT, altsetting$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

